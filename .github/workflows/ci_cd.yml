name: CI/CD for dlctool

on:
  push:
    branches:
      - master

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Install linting tools
        run: python -m pip install black flake8
      - name: Code formatting check
        run: black --check .
      - name: Static code analysis
        run: flake8 --max-line-length=120 .

  cd:
    name: Continuous Deployment
    needs: ci
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-20.04
            artifact_name: dlctool-linux
            build_command: pyinstaller --onefile dlctool.py && mv dist/dlctool dlctool-linux
          - os: windows-latest
            artifact_name: dlctool-windows.exe
            build_command: pyinstaller --onefile dlctool.py && move dist\\dlctool.exe dlctool-windows.exe
          - os: macos-latest
            artifact_name: dlctool-macos
            build_command: pyinstaller --onefile dlctool.py && mv dist/dlctool dlctool-macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Install pyinstaller
        run: python -m pip install pyinstaller
      - name: Build executable
        run: ${{ matrix.build_command }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  create-release:
    name: Create Release
    needs: cd
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          # 添加 pattern: '*' 确保下载所有工件
          pattern: '*'
          # 设置合并下载到扁平化目录
          merge-multiple: true

      - name: Verify artifacts
        run: |
          echo "Directory structure:"
          ls -R artifacts
          echo "Total files found:"
          find artifacts -type f

      - name: Generate release tag
        id: generate_tag
        run: echo "tag=v$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_tag.outputs.tag }}
          name: Release ${{ steps.generate_tag.outputs.tag }}
          body: "Multi-platform executables (Linux, Windows, macOS)"
          files: |
            artifacts/*
          draft: false
          prerelease: false